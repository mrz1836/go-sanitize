# ------------------------------------------------------------------------------------
#  Warm Cache Composite Action (GoFortress)
#
#  Purpose: Warm Go module and build caches for efficient CI/CD execution.
#  This action handles cache restoration, warming, and saving for Go projects.
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: 'Warm Go Caches'
description: 'Warm Go module and build caches for the specified Go version and OS'

inputs:
  go-version:
    description: 'Go version to use'
    required: true
  matrix-os:
    description: 'Operating system for the runner'
    required: true
  matrix-name:
    description: 'Display name for the matrix configuration'
    required: true
  enable-verbose:
    description: 'Enable verbose output'
    required: false
    default: 'false'
  go-primary-version:
    description: 'Primary Go version for comparison'
    required: true
  go-secondary-version:
    description: 'Secondary Go version for comparison'
    required: true

runs:
  using: 'composite'
  steps:
    # ————————————————————————————————————————————————————————————————
    # Checkout code, set up Go, and cache dependencies
    # ————————————————————————————————————————————————————————————————
    - name: 📥 Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    # ————————————————————————————————————————————————————————————————
    # Set environment variables
    # ————————————————————————————————————————————————————————————————
    - name: ⚙️ Set cache paths
      id: set-cache-env
      shell: bash
      run: |
        echo "🔧 Setting up cache environment variables..."
        echo "GOCACHE=$HOME/.cache/go-build" >> $GITHUB_ENV
        echo "GOMODCACHE=$HOME/go/pkg/mod" >> $GITHUB_ENV
        echo "GOLANGCI_LINT_CACHE=$HOME/.cache/golangci-lint" >> $GITHUB_ENV
        echo "✅ Cache Environment variables set successfully"

    # ────────────────────────────────────────────────────────────────────────────
    # Restore the *shared* module cache (pkg/mod)
    # ────────────────────────────────────────────────────────────────────────────
    - name: 💾 Restore Go module cache (shared)
      id: gomod-cache
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684     # v4.2.3
      with:
        path: |
          ~/go/pkg/mod
        key: ${{ inputs.matrix-os }}-gomod-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ inputs.matrix-os }}-gomod-

    # ————————————————————————————————————————————————————————————————
    # Check go.mod required version before setting up Go
    # ————————————————————————————————————————————————————————————————
    - name: 🔍 Check Go version requirement
      id: check-go-version
      shell: bash
      run: |
        if [ -f go.mod ]; then
          REQUIRED_VERSION=$(grep -E '^go\s+[0-9]+\.[0-9]+' go.mod | awk '{print $2}')
          if [ -n "$REQUIRED_VERSION" ]; then
            echo "📋 go.mod requires Go version: $REQUIRED_VERSION"
            echo "required_version=$REQUIRED_VERSION" >> $GITHUB_OUTPUT

            # Extract major.minor from inputs.go-version (handle formats like 1.23.x, 1.23, 1.23.4)
            REQUESTED_VERSION="${{ inputs.go-version }}"
            REQUESTED_MAJOR_MINOR=$(echo "$REQUESTED_VERSION" | grep -oE '^[0-9]+\.[0-9]+')

            # Compare versions
            if [ -n "$REQUESTED_MAJOR_MINOR" ]; then
              # Convert to comparable format (e.g., 1.23 -> 123, 1.9 -> 109)
              REQ_COMPARABLE=$(echo "$REQUIRED_VERSION" | awk -F. '{printf "%d%02d", $1, $2}')
              REQUESTED_COMPARABLE=$(echo "$REQUESTED_MAJOR_MINOR" | awk -F. '{printf "%d%02d", $1, $2}')

              if [ "$REQUESTED_COMPARABLE" -lt "$REQ_COMPARABLE" ]; then
                echo "⚠️ WARNING: Requested Go version (${{ inputs.go-version }}) is older than required ($REQUIRED_VERSION)"
                echo "version_mismatch=true" >> $GITHUB_OUTPUT
              else
                echo "✅ Requested Go version (${{ inputs.go-version }}) meets requirement ($REQUIRED_VERSION)"
                echo "version_mismatch=false" >> $GITHUB_OUTPUT
              fi
            fi
          fi
        fi

    # ————————————————————————————————————————————————————————————————
    # Determine Go Toolchain Mode and set up Go
    # ————————————————————————————————————————————————————————————————
    # Issue with installing 1.23 and then it auto-upgrading to 1.24
    - name: 🧮 Determine Go Toolchain Mode
      id: toolchain-mode
      shell: bash
      run: |
        # If there's a version mismatch, allow toolchain to auto-upgrade
        if [[ "${{ steps.check-go-version.outputs.version_mismatch }}" == "true" ]]; then
          echo "⚠️ Version mismatch detected - allowing Go toolchain to auto-upgrade"
          echo "Not setting GOTOOLCHAIN (using default auto behavior)"
        elif [[ "${{ inputs.go-version }}" == "${{ inputs.go-secondary-version }}" && \
              "${{ inputs.go-version }}" != "${{ inputs.go-primary-version }}" ]]; then
          echo "Setting GOTOOLCHAIN=local"
          echo "GOTOOLCHAIN=local" >> $GITHUB_ENV
        else
          echo "Not setting GOTOOLCHAIN (using default)"
        fi

    - name: 🏗️ Set up Go
      id: setup-go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version: ${{ inputs.go-version }}
        cache: false # we handle caches ourselves

    # ────────────────────────────────────────────────────────────────────────────
    # Restore the build cache & test cache
    # ────────────────────────────────────────────────────────────────────────────
    - name: 💾 Restore Go build cache (per-version)
      id: gobuild-cache
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684     # v4.2.3
      with:
        path: |
          ~/.cache/go-build
          ~/.cache/go-build/test
        # Try and get the full cache first, which includes test cache
        key: ${{ inputs.matrix-os }}-gobuild-${{ inputs.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ inputs.matrix-os }}-gobuild-${{ inputs.go-version }}-

    # ————————————————————————————————————————————————————————————————
    # Ensure go.sum exists and download modules
    # ————————————————————————————————————————————————————————————————
    - name: 📋 Ensure go.sum exists
      shell: bash
      run: |
        echo "🔍 Checking for go.sum file..."
        if [ ! -f go.sum ]; then
          echo "⚠️ go.sum not found, running 'make mod-tidy' to generate it."
          make mod-tidy
          echo "✅ go.sum generated successfully"
        else
          echo "✅ go.sum already exists"
        fi

    # ────────────────────────────────────────────────────────────────────────────
    # Warm the caches only when we had a miss
    # ────────────────────────────────────────────────────────────────────────────
    - name: 🚀 Warm cache (miss only)
      if: steps.gobuild-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        set -euo pipefail
        echo "⬇️  Downloading modules..."
        make mod-download

        echo "🔧 Pre-building project packages..."
        make pre-build VERBOSE=${{ inputs.enable-verbose }}

        echo "🏗️  Building stdlib for host platform…"
        make install-stdlib

        echo "✅ Cache warmed for Go ${{ inputs.go-version }}"

    # ────────────────────────────────────────────────────────────────────────────
    # Save the build cache we just created
    # ────────────────────────────────────────────────────────────────────────────
    - name: 💾 Save Go build cache
      if: steps.gobuild-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # v4.0.2
      with:
        path: |
          ~/.cache/go-build
          ~/.cache/go-build/test
        # This is the first key, which does NOT have test cache, this will be used as a fail-over
        key: ${{ inputs.matrix-os }}-gobuild-${{ inputs.go-version }}-${{ hashFiles('**/go.sum') }}

    # ————————————————————————————————————————————————————————————————
    # Track cache performance (no outputs - use artifacts instead)
    # ————————————————————————————————————————————————————————————————
    - name: 📊 Calculate cache statistics
      id: cache-summary
      if: always()
      shell: bash
      run: |
        STATS_FILE="cache-stats-${{ inputs.matrix-os }}-${{ inputs.go-version }}.json"

        cat > "$STATS_FILE" << EOF
        {
          "os": "${{ inputs.matrix-os }}",
          "go_version": "${{ inputs.go-version }}",
          "gomod_cache_hit": ${{ steps.gomod-cache.outputs.cache-hit == 'true' && 'true' || 'false' }},
          "gobuild_cache_hit": ${{ steps.gobuild-cache.outputs.cache-hit == 'true' && 'true' || 'false' }},
          "cache_size_gomod": "$(du -sh $GOMODCACHE 2>/dev/null | cut -f1 || echo '0')",
          "cache_size_gobuild": "$(du -sh $GOCACHE 2>/dev/null | cut -f1 || echo '0')",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF

        echo "📊 Cache statistics:"
        jq . "$STATS_FILE"

    # ————————————————————————————————————————————————————————————————
    # Upload cache statistics
    # ————————————————————————————————————————————————————————————————
    - name: 📤 Upload cache statistics
      if: always()
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
      with:
        name: cache-stats-${{ inputs.matrix-os }}-${{ inputs.go-version }}
        path: cache-stats-*.json
        retention-days: 1
