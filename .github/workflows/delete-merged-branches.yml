# ------------------------------------------------------------------------------
#  Delete Merged Branches Workflow
#
#  Purpose: Remove feature branches after a pull request has been merged.
#
#  Triggers: Pull request close events.
#
#  Maintainer: @mrz1836
# ------------------------------------------------------------------------------

name: delete-merged-branches

on:
  pull_request:
    types: [closed]

# Cancel older runs of the same PR if a new commit is pushed
concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
    cancel-in-progress: true

permissions:
    contents: read

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    # Only run if the PR was merged
    if: github.event.pull_request.merged == true
    steps:
      # Step 1: Use github-script to run custom JS for branch deletion
      - name: Delete branch
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get repo owner, name, and branch to delete
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const branch = context.payload.pull_request.head.ref;

            // Fetch repository data to determine the default branch
            const { data: repoData } = await github.rest.repos.get({
              owner,
              repo,
            });
            const defaultBranch = repoData.default_branch;
            // List of branches that should never be deleted
            const protectedBranches = ['master', 'main', defaultBranch];

            // Only delete if not a protected branch
            if (!protectedBranches.includes(branch)) {
              try {
                // Attempt to delete the branch ref
                await github.rest.git.deleteRef({
                  owner,
                  repo,
                  ref: `heads/${branch}`,
                });
                console.log(`Deleted branch ${branch}`);
              } catch (error) {
                // Handle case where branch is already deleted or protected
                if (error.status === 422) {
                  console.log(`Branch ${branch} already deleted or protected.`);
                } else {
                  // Fail the workflow for other errors
                  core.setFailed(`Failed to delete branch ${branch}: ${error.message}`);
                }
              }
            } else {
              console.log(`Skipping deletion for protected branch ${branch}`);
            }
