# ------------------------------------------------------------------------------------
#  Code Quality (Reusable Workflow) (GoFortress)
#
#  Purpose: Run code quality checks including Go vet (static analysis) and
#  golangci-lint (comprehensive linting).
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: GoFortress (Code Quality)

on:
  workflow_call:
    inputs:
      env-json:
        description: "JSON string of environment variables"
        required: true
        type: string
      primary-runner:
        description: "Primary runner OS"
        required: true
        type: string
      go-primary-version:
        description: "Primary Go version"
        required: true
        type: string
      go-lint-enabled:
        description: "Whether Go linting is enabled"
        required: true
        type: string
      yaml-lint-enabled:
        description: "Whether YAML linting is enabled"
        required: true
        type: string
      static-analysis-enabled:
        description: "Whether static analysis is enabled"
        required: true
        type: string
    outputs:
      golangci-lint-version:
        description: "Version of golangci-lint used in the workflow"
        value: ${{ jobs.lint.outputs.golangci-lint-version }}
      prettier-version:
        description: "Version of prettier used in the workflow"
        value: ${{ jobs.yaml-lint.outputs.prettier-version }}
    secrets:
      github-token:
        description: "GitHub token for API access"
        required: true

permissions:
  contents: read

jobs:
  # ----------------------------------------------------------------------------------
  # Go Vet (Static Analysis)
  # ----------------------------------------------------------------------------------
  govet:
    name: 📊 Govet (Static Analysis)
    if: ${{ inputs.static-analysis-enabled == 'true' }}
    runs-on: ${{ inputs.primary-runner }}
    steps:
      # ————————————————————————————————————————————————————————————————
      # Parse environment variables
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "📋 Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      # ————————————————————————————————————————————————————————————————
      # Checkout code and set up Go environment
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: 🔧 Set Go cache paths (cross-platform)
        run: |
          echo "🔧 Setting up Go cache paths..."
          echo "GOCACHE=$HOME/.cache/go-build"        >> $GITHUB_ENV
          echo "GOMODCACHE=$HOME/go/pkg/mod"          >> $GITHUB_ENV
          echo "GOLANGCI_LINT_CACHE=$HOME/.cache/golangci-lint" >> $GITHUB_ENV

      # ————————————————————————————————————————————————————————————————
      # Restore Go module and build caches
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Restore Go module cache
        id: restore-gomod
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/go/pkg/mod
          key: ${{ inputs.primary-runner }}-gomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gomod-

      # ————————————————————————————————————————————————————————————————
      # # Restore the build cache and test cache
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Restore Go build cache
        id: restore-gobuild
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/go-build/test
          key: ${{ inputs.primary-runner }}-gobuild-${{ inputs.go-primary-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gobuild-${{ inputs.go-primary-version }}-

      # ————————————————————————————————————————————————————————————————
      # Set up Go environment
      # ————————————————————————————————————————————————————————————————
      - name: 🏗️ Set up Go
        id: setup-go-vet
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ inputs.go-primary-version }}
          cache: false # we handle caches ourselves

      # ————————————————————————————————————————————————————————————————
      # Run go vet with parallel execution
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Go vet (parallel)
        run: |
          echo "🚀 Running static analysis with go vet (parallel mode)..."
          make vet-parallel
          echo "✅ Static analysis completed successfully"

      # ————————————————————————————————————————————————————————————————
      # Summary of Go vet results
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Job Summary
        run: |
          echo "## 📊 Go Vet Static Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Analysis Details | ✅ Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $GITHUB_STEP_SUMMARY
          echo "| **Tool** | go vet (Official Go Static Analyzer) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Execution** | 🚀 Project packages only |" >> $GITHUB_STEP_SUMMARY
          echo "| **Scope** | ./... (excludes dependencies) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Result** | ✅ No issues found |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **All packages passed static analysis checks.**" >> $GITHUB_STEP_SUMMARY

  # ----------------------------------------------------------------------------------
  # Lint (Code Linting)
  # ----------------------------------------------------------------------------------
  lint:
    name: ✨ Lint Code
    if: ${{ inputs.go-lint-enabled == 'true' }}
    runs-on: ${{ inputs.primary-runner }}
    outputs:
      golangci-lint-version: ${{ steps.golangci-lint-version.outputs.version }}
    steps:
      # ————————————————————————————————————————————————————————————————
      # Parse environment variables
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "📋 Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      # ————————————————————————————————————————————————————————————————
      # Checkout code and set up Go environment
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: 🔧 Set Go cache paths (cross-platform)
        run: |
          echo "🔧 Setting up Go cache paths..."
          echo "GOCACHE=$HOME/.cache/go-build"        >> $GITHUB_ENV
          echo "GOMODCACHE=$HOME/go/pkg/mod"          >> $GITHUB_ENV
          echo "GOLANGCI_LINT_CACHE=$HOME/.cache/golangci-lint" >> $GITHUB_ENV

      # ————————————————————————————————————————————————————————————————
      # Extract golangci-lint version from Makefile
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Extract golangci-lint version from Makefile
        id: golangci-lint-version
        run: |
          VERSION=$(make lint-version)
          if [ -z "$VERSION" ]; then
            echo "❌ GOLANGCI_LINT_VERSION is not set in the Makefile"
            exit 1
          fi
          echo "✅ Found golangci-lint version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # ————————————————————————————————————————————————————————————————
      # Restore Go module and build caches
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Restore Go module cache
        id: restore-gomod
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/go/pkg/mod
          key: ${{ inputs.primary-runner }}-gomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gomod-

      # ————————————————————————————————————————————————————————————————
      # Restore the build cache and test cache
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Restore Go build cache
        id: restore-gobuild
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/go-build/test
          key: ${{ inputs.primary-runner }}-gobuild-${{ inputs.go-primary-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ inputs.primary-runner }}-gobuild-${{ inputs.go-primary-version }}-

      # ————————————————————————————————————————————————————————————————
      # Set up Go environment
      # ————————————————————————————————————————————————————————————————
      - name: 🏗️ Set up Go
        id: setup-go-lint
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ inputs.go-primary-version }}
          cache: false

      # ————————————————————————————————————————————————————————————————
      # Restore Cache golangci-lint
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Cache golangci-lint analysis
        id: cache-golangci-lint
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ${{ env.GOLANGCI_LINT_CACHE }}
          key: ${{ inputs.primary-runner }}-golangci-lint-analysis-${{ hashFiles('.golangci.json', '**/go.sum') }}-${{ steps.golangci-lint-version.outputs.version }}
          restore-keys: |
            ${{ inputs.primary-runner }}-golangci-lint-analysis-${{ hashFiles('.golangci.json', '**/go.sum') }}
            ${{ inputs.primary-runner }}-golangci-lint-analysis-

      - name: 🔍 Debug cache usage
        run: |
          echo "🔍 Module cache size: $(du -sh $GOMODCACHE 2>/dev/null | cut -f1 || echo 'N/A')"
          echo "🔍 Build cache size: $(du -sh $GOCACHE 2>/dev/null | cut -f1 || echo 'N/A')"
          echo "🔍 Lint cache size: $(du -sh $GOLANGCI_LINT_CACHE 2>/dev/null | cut -f1 || echo 'N/A')"
          echo "🔍 Checking if vendor directory exists: $(ls -la | grep vendor || echo 'No vendor directory')"

      # ————————————————————————————————————————————————————————————————
      # Run golangci-lint
      # ————————————————————————————————————————————————————————————————
      - name: ✨ Run golangci-lint
        run: |
          echo "🧹 Running code linting with golangci-lint..."
          echo "💾 Golangci-lint cache location: $GOLANGCI_LINT_CACHE"
          echo "📁 Module cache path: $GOMODCACHE"

          # Export the cache directory for golangci-lint
          export GOLANGCI_LINT_CACHE=$GOLANGCI_LINT_CACHE

          # Running lint with version from Makefile
          echo "🔧 Using golangci-lint version: ${{ steps.golangci-lint-version.outputs.version }}"

          # Run with your makefile
          make lint

          echo "✅ Code linting completed successfully"

      # ————————————————————————————————————————————————————————————————
      # Summary of golangci-lint results
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Job Summary
        run: |
          echo "## ✨ Code Linting Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 🧹 Linting Details | ✅ Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $GITHUB_STEP_SUMMARY
          echo "| **Configuration** | Custom ruleset via .golangci.json |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | ${{ steps.golangci-lint-version.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Cache** | 💾 Analysis cache enabled |" >> $GITHUB_STEP_SUMMARY
          echo "| **Result** | ✅ All checks passed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Code quality standards met - no linting issues found.**" >> $GITHUB_STEP_SUMMARY

  # ----------------------------------------------------------------------------------
  # YAML Validation (Linting)
  # ----------------------------------------------------------------------------------
  yaml-lint:
    name: 📐 YAML Format Validation
    if: ${{ inputs.yaml-lint-enabled == 'true' }}
    runs-on: ${{ inputs.primary-runner }}
    outputs:
      prettier-version: ${{ steps.prettier-version.outputs.version }}
    steps:
      # ————————————————————————————————————————————————————————————————
      # Parse environment variables
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "📋 Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      # ————————————————————————————————————————————————————————————————
      # Checkout code with full history for proper ignore file handling
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # Full history for prettier ignores files

      # ————————————————————————————————————————————————————————————————
      # Check for required .prettierignore file
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Check for .prettierignore
        run: |
          if [ -f .github/.prettierignore ]; then
            echo "✅ Found .prettierignore in .github directory"
            echo "PRETTIER_IGNORE_PATH=.github/.prettierignore" >> $GITHUB_ENV
          elif [ -f .prettierignore ]; then
            echo "✅ Found .prettierignore in root directory"
            echo "PRETTIER_IGNORE_PATH=.prettierignore" >> $GITHUB_ENV
          else
            echo "❌ ERROR: .prettierignore file is required but not found!"
            echo "Please create either:"
            echo "  - .github/.prettierignore (preferred)"
            echo "  - .prettierignore (root directory)"
            exit 1
          fi

      # ————————————————————————————————————————————————————————————————
      # Set up Node.js (no caching since we don't have package.json)
      # ————————————————————————————————————————————————————————————————
      - name: 🏗️ Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.0.4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # ————————————————————————————————————————————————————————————————
      # Create package.json with pinned prettier and install securely
      # ————————————————————————————————————————————————————————————————
      - name: 📦 Create package.json with pinned prettier
        run: |
          echo "{
            \"name\": \"yaml-validation\",
            \"version\": \"1.0.0\",
            \"private\": true,
            \"devDependencies\": {
              \"prettier\": \"${{ env.PRETTIER_VERSION }}\"
            }
          }" > package.json
          echo "✅ Package.json created"

      # ————————————————————————————————————————————————————————————————
      # Install Prettier using existing local installation if available
      # ————————————————————————————————————————————————————————————————
      - name: 📦 Install Prettier (secure)
        run: |
          echo "📦 Installing Prettier version ${{ env.PRETTIER_VERSION }}..."

          # Check if prettier is already available locally (from user's setup)
          if [ -f "../node_modules/.bin/prettier" ]; then
            echo "✅ Using existing prettier installation"
            ln -sf ../node_modules .
          elif [ -f "node_modules/.bin/prettier" ]; then
            echo "✅ Using current prettier installation"
          else
            echo "📦 Installing prettier via npx (cached)..."
            # Use npx which caches but doesn't require npm install
            npx --yes prettier@${{ env.PRETTIER_VERSION }} --version > /dev/null
          fi

          # Capture version for output
          PRETTIER_VERSION=$(npx prettier --version)
          echo "📌 Prettier version: $PRETTIER_VERSION"
          echo "version=$PRETTIER_VERSION" >> $GITHUB_OUTPUT
        id: prettier-version

      # ————————————————————————————————————————————————————————————————
      # List YAML files to be checked (for transparency)
      # ————————————————————————————————————————————————————————————————
      - name: 📋 List YAML files to check
        run: |
          echo "📋 Using prettier ignore file: $PRETTIER_IGNORE_PATH"
          echo ""
          echo "📊 YAML files that will be validated:"
          npx prettier "**/*.{yml,yaml}" --list-different --ignore-path "$PRETTIER_IGNORE_PATH" 2>/dev/null | sort || true

          TOTAL_YAML=$(find . -type f \( -name "*.yml" -o -name "*.yaml" \) -not -path "./.git/*" | wc -l | xargs)
          CHECKED_YAML=$(npx prettier "**/*.{yml,yaml}" --ignore-path "$PRETTIER_IGNORE_PATH" --list-different --log-level=silent | wc -l | xargs || echo "0")
          # Get total files that would be processed (not just different ones)
          PROCESSED_YAML=$(find . -type f \( -name "*.yml" -o -name "*.yaml" \) -not -path "./.git/*" | while read file; do
            npx prettier "$file" --ignore-path "$PRETTIER_IGNORE_PATH" --list-different --log-level=silent > /dev/null 2>&1
            if [ $? -ne 2 ]; then echo "$file"; fi
          done | wc -l | xargs || echo "0")

          # Export to environment for use in later steps
          echo "TOTAL_YAML=$TOTAL_YAML" >> $GITHUB_ENV
          echo "CHECKED_YAML=$CHECKED_YAML" >> $GITHUB_ENV
          echo "PROCESSED_YAML=$PROCESSED_YAML" >> $GITHUB_ENV

          echo ""
          echo "📈 Summary:"
          echo "   • Total YAML files found: $TOTAL_YAML"
          echo "   • Files that would be processed: $PROCESSED_YAML"
          echo "   • Files needing formatting: $CHECKED_YAML"
          echo "   • Files ignored by prettier: $((TOTAL_YAML - PROCESSED_YAML))"

      # ————————————————————————————————————————————————————————————————
      # Run Prettier in check mode against YAML files
      # ————————————————————————————————————————————————————————————————
      - name: 🔍 Verify YAML formatting
        id: prettier-check
        run: |
          echo "🔍 Checking YAML file formatting..."
          set +e  # Don't exit on error immediately

          npx prettier "**/*.{yml,yaml}" --check --config .github/.prettierrc.yml --ignore-path "$PRETTIER_IGNORE_PATH"
          PRETTIER_EXIT_CODE=$?

          if [ $PRETTIER_EXIT_CODE -eq 0 ]; then
            echo "✅ All YAML files are properly formatted"
            echo "check_passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ YAML formatting issues detected"
            echo "check_passed=false" >> $GITHUB_OUTPUT
          fi

          exit $PRETTIER_EXIT_CODE

      # ————————————————————————————————————————————————————————————————
      # Show detailed diff when check fails (helpful for debugging)
      # ————————————————————————————————————————————————————————————————
      - name: 📝 Show formatting diff
        if: failure() && steps.prettier-check.outputs.check_passed == 'false'
        run: |
          echo "❌ YAML files not formatted according to .editorconfig rules"
          echo ""
          echo "📋 Required formatting changes:"
          echo "================================"

          # Create a temporary directory for formatted files
          mkdir -p .formatted_yaml

          # Generate diffs for each file
          find . -type f \( -name "*.yml" -o -name "*.yaml" \) \
            -not -path "./node_modules/*" \
            -not -path "./vendor/*" \
            -not -path "./.git/*" \
            -not -path "./dist/*" \
            -not -path "./build/*" | while read -r file; do

            # Format the file to a temporary location
            npx prettier "$file" --config .github/.prettierrc.yml --ignore-path "$PRETTIER_IGNORE_PATH" > ".formatted_yaml/$(basename "$file")" 2>/dev/null

            # Check if the file would change
            if ! diff -q "$file" ".formatted_yaml/$(basename "$file")" >/dev/null 2>&1; then
              echo ""
              echo "📄 File: $file"
              echo "---"
              # Show unified diff with color
              diff -u "$file" ".formatted_yaml/$(basename "$file")" | sed '1,2d' || true
            fi
          done

          echo ""
          echo "================================"
          echo ""
          echo "🔧 To fix these issues locally, run:"
          echo "    npm install --no-save prettier"
          echo "    npx prettier \"**/*.{yml,yaml}\" --write --config .github/.prettierrc.yml --ignore-path $PRETTIER_IGNORE_PATH"
          echo ""
          echo "📚 EditorConfig YAML rules:"
          echo "    • Indent style: spaces (not tabs)"
          echo "    • Indent size: 2"
          echo "    • End of line: LF"
          echo "    • Final newline: required"
          echo "    • Trailing whitespace: trimmed"

          # Clean up
          rm -rf .formatted_yaml

          # Exit with failure
          exit 1

      # ————————————————————————————————————————————————————————————————
      # Job Summary
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Job Summary
        if: success()
        run: |
          echo "## 📐 YAML Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Validation Details | ✅ Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $GITHUB_STEP_SUMMARY
          echo "| **Tool** | Prettier (EditorConfig-aware) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | ${{ steps.prettier-version.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Configuration** | .editorconfig rules |" >> $GITHUB_STEP_SUMMARY
          echo "| **Scope** | All .yml and .yaml files |" >> $GITHUB_STEP_SUMMARY
          echo "| **Result** | ✅ All files properly formatted |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 File Processing Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- **Total YAML files found**: ${{ env.TOTAL_YAML }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Files processed by prettier**: ${{ env.PROCESSED_YAML }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **Files needing formatting**: ${{ env.CHECKED_YAML }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Files ignored by prettier**: $((${{ env.TOTAL_YAML }} - ${{ env.PROCESSED_YAML }}))" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 EditorConfig YAML Rules Applied" >> $GITHUB_STEP_SUMMARY
          echo "- **Indent Style**: Spaces" >> $GITHUB_STEP_SUMMARY
          echo "- **Indent Size**: 2" >> $GITHUB_STEP_SUMMARY
          echo "- **Line Endings**: LF" >> $GITHUB_STEP_SUMMARY
          echo "- **Final Newline**: Required" >> $GITHUB_STEP_SUMMARY
          echo "- **Trailing Whitespace**: Trimmed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **All YAML files meet formatting standards.**" >> $GITHUB_STEP_SUMMARY

      # ————————————————————————————————————————————————————————————————
      # Cleanup
      # ————————————————————————————————————————————————————————————————
      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -f package.json
          # Only remove node_modules if we created it (not if it was linked)
          if [ ! -L node_modules ]; then
            rm -rf node_modules
          fi
          echo "✅ Cleanup completed"
