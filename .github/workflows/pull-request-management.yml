# ------------------------------------------------------------------------------------
#  Pull Request Management Workflow
#
#  Purpose: Automatically applies labels to pull requests based on branch name prefix,
#           assigns a default user if none is assigned, and welcomes new contributors
#           (excluding known bots/authors) with a friendly comment on PR creation.
#
#  Triggers: On PR open, synchronize, reopen, or ready for review.
#
#  Maintainer: @mrz1836
#
#  Default Assignee: Set below in the 'DEFAULT_ASSIGNEE' variable.
#
#  Known Bots/Authors: The list of known bots/authors to exclude from welcome comments
#                      is set in the 'knownBots' array in the script section below.
# ------------------------------------------------------------------------------------

name: pull-request-management

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel older runs of the same PR if a new commit is pushed
concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

permissions:
    contents: read
    issues: write
    pull-requests: write

jobs:
  apply-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Add labels based on branch
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
            // 1. Label PRs by branch prefix
            // â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
            const DEFAULT_ASSIGNEE = 'mrz1836'; // <-- Change this value to update the default assignee
            const branch = context.payload.pull_request.head.ref;
            const labels = [];
            const labelMap = [
              { regex: /^feat\//i, label: 'feature' },
              { regex: /^(bug)?fix\//i, label: 'bug-P3' },
              { regex: /^docs\//i, label: 'documentation' },
              { regex: /^chore\//i, label: 'update' },
              { regex: /^test\//i, label: 'test' },
              { regex: /^refactor\//i, label: 'refactor' },
              { regex: /^hotfix\//i, label: 'hot-fix' },
              { regex: /^proto(type)?\//i, label: 'prototype' },
              { regex: /^idea\//i, label: 'idea' },
              { regex: /^question\//i, label: 'question' },
            ];
            for (const { regex, label } of labelMap) {
              if (regex.test(branch)) {
                labels.push(label);
              }
            }
            if (labels.length > 0) {
              try {
                // Fetch existing labels on the PR
                const { data: prLabels } = await github.rest.issues.listLabelsOnIssue({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                });
                const existing = prLabels.map(l => l.name);
                // Only add labels that are not already present
                const toAdd = labels.filter(l => !existing.includes(l));
                if (toAdd.length > 0) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.payload.pull_request.number,
                    labels: toAdd,
                  });
                }
              } catch (error) {
                if (core && typeof core.setFailed === 'function') {
                  core.setFailed(`Failed to add labels: ${error.message}`);
                } else {
                  console.error('Failed to add labels:', error);
                }
              }
            }

            // â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
            // 2. Assign PR to default assignee if none is assigned
            // â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
            try {
              const assignees = context.payload.pull_request.assignees;
              if (!assignees || assignees.length === 0) {
                await github.rest.issues.addAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  assignees: [DEFAULT_ASSIGNEE],
                });
              }
            } catch (error) {
              const integrationMessage = 'Resource not accessible by integration';
              const isIntegrationError = error.message.includes(integrationMessage);
              const isFromFork = context.actor !== context.repo.owner;

              if (isIntegrationError && isFromFork) {
                console.warn(
                  `Skipping assignee due to limited token permissions and possible fork. actor: ${context.actor}, repo.owner: ${context.repo.owner}`
                );
              } else if (isIntegrationError) {
                  console.warn(
                    `Skipping assignee due to limited token permissions. actor: ${context.actor}, repo.owner: ${context.repo.owner}`
                  );
              } else if (core && typeof core.setFailed === 'function') {
                core.setFailed(
                  `Failed to assign PR: ${error.message} (actor: ${context.actor}, repo.owner: ${context.repo.owner})`
                );
              } else {
                console.error(
                  `Failed to assign PR: ${error.message} (actor: ${context.actor}, repo.owner: ${context.repo.owner})`
                );
              }
            }

            // â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
            // 3. Welcome new contributors with a friendly comment
            // â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
            const author = context.payload.pull_request.user.login;
            const knownBots = ['dependabot[bot]', 'mergify[bot]', 'copilot[bot]', 'Copilot', DEFAULT_ASSIGNEE];
            if (!knownBots.includes(author) && context.payload.action === 'opened') {
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: `Welcome to our open-source project, @${author}! ðŸ’˜`
                });
              } catch (error) {
                if (core && typeof core.setFailed === 'function') {
                  core.setFailed(`Failed to post welcome comment: ${error.message}`);
                } else {
                  console.error('Failed to post welcome comment:', error);
                }
              }
            }
