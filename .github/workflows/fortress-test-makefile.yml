# ------------------------------------------------------------------------------------
#  Test Makefile (Reusable Workflow) (GoFortress)
#
#  Purpose: Verify that the Makefile exists, compiles correctly, and contains all
#  required targets. This is a prerequisite for other workflows that use make commands.
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: GoFortress (Test Makefile)

on:
  workflow_call:
    inputs:
      env-json:
        description: 'JSON string of environment variables'
        required: true
        type: string
      primary-runner:
        description: 'Primary runner OS'
        required: true
        type: string

permissions:
  contents: read

jobs:
  # ----------------------------------------------------------------------------------
  # Test Makefile (Compilation and Help Verification)
  # ----------------------------------------------------------------------------------
  test-makefile:
    name: 📋 Verify & Test Makefile
    runs-on: ${{ inputs.primary-runner }}
    steps:
      # ————————————————————————————————————————————————————————————————
      # Parse environment variables
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment variables
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "📋 Setting environment variables..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done

      # ————————————————————————————————————————————————————————————————
      # Checkout code (sparse checkout)
      # ————————————————————————————————————————————————————————————————
      - name: 📥 Checkout (sparse)
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0                     # Required for sparse checkout
          sparse-checkout: |
            .make
            Makefile
            go.mod
            go.sum

      # ————————————————————————————————————————————————————————————————
      # Verify the Makefile compiles and runs
      # ————————————————————————————————————————————————————————————————
      - name: ✅ Verify make help compiles
        run: |
          echo "📋 Running makefile..."
          make help
          echo "✅ Makefile ran successfully"

      - name: ✅ Verify make help and required commands
        id: verify-make
        run: |
          echo "📋 Testing for required make targets..."

          # Capture help output
          HELP_OUTPUT=$(make help)

          echo "$HELP_OUTPUT"

          # List of required make targets
          REQUIRED_COMMANDS=(
            bench
            build-go
            coverage
            fumpt
            generate
            godocs
            govulncheck-install
            help
            install-go
            install-stdlib
            loc
            lint
            lint-version
            mod-download
            mod-tidy
            pre-build
            test
            test-ci
            test-ci-no-race
            test-cover
            test-cover-race
            test-fuzz
            test-no-lint
            test-parallel
            test-race
            test-short
            uninstall
            update
            vet
            vet-parallel
            release
            tag
            tag-remove
            tag-update
          )

          MATCHED_COUNT=0
          MISSING_COUNT=0
          MISSING_COMMANDS=()

          echo ""
          echo "🔍 Verifying required make targets..."

          for cmd in "${REQUIRED_COMMANDS[@]}"; do
            if echo "$HELP_OUTPUT" | grep -qE "^$cmd[[:space:]]"; then
              echo "✅ Found: $cmd"
              MATCHED_COUNT=$((MATCHED_COUNT + 1))
            else
              echo "❌ Missing required target: $cmd"
              MISSING_COMMANDS+=("$cmd")
              MISSING_COUNT=$((MISSING_COUNT + 1))
            fi
          done

          echo ""
          echo "✅ Matched: $MATCHED_COUNT"
          echo "❌ Missing: $MISSING_COUNT"

          echo "matched=$MATCHED_COUNT" >> "$GITHUB_OUTPUT"
          echo "missing=$MISSING_COUNT" >> "$GITHUB_OUTPUT"
          echo "missing_commands=${MISSING_COMMANDS[*]}" >> "$GITHUB_OUTPUT"

          # Fail if anything is missing
          if [ $MISSING_COUNT -gt 0 ]; then
            echo ""
            echo "🚨 Missing Makefile targets:"
            printf ' - %s\n' "${MISSING_COMMANDS[@]}"
            exit 1
          fi

          echo ""
          echo "✅ Makefile verification completed successfully."

      # ————————————————————————————————————————————————————————————————
      # Summary of Makefile verification
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Job Summary
        run: |
          echo "## 📋 Makefile Verification Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 🔧 Verification Details | ✅ Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $GITHUB_STEP_SUMMARY
          echo "| **Test** | make help command |" >> $GITHUB_STEP_SUMMARY
          echo "| **Purpose** | Verify Makefile syntax and functionality |" >> $GITHUB_STEP_SUMMARY
          echo "| **Matched Targets** | ${{ steps.verify-make.outputs.matched }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Missing Targets** | ${{ steps.verify-make.outputs.missing }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.verify-make.outputs.missing }}" != "0" ]]; then
            echo "🚨 **Missing Targets:** ${{ steps.verify-make.outputs.missing_commands }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "🎯 **Makefile is properly configured and functional.**" >> $GITHUB_STEP_SUMMARY
          fi
